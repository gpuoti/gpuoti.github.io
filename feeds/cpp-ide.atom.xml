<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coder Notepad</title><link href="http://gpuoti.github.io/" rel="alternate"></link><link href="http://gpuoti.github.io/feeds/cpp-ide.atom.xml" rel="self"></link><id>http://gpuoti.github.io/</id><updated>2015-08-27T00:00:00+02:00</updated><entry><title>Port projects to new tools</title><link href="http://gpuoti.github.io/projects_to_new_tools.html" rel="alternate"></link><updated>2015-08-27T00:00:00+02:00</updated><author><name>Giuseppe Puoti</name></author><id>tag:gpuoti.github.io,2015-08-27:projects_to_new_tools.html</id><summary type="html">&lt;p&gt;At work we use to touch projects as few as possible. To me this lead to bad problems on long term. For example we use to not upgrade our tools. I mean we not adopt modern language standard, new GUI libraries or file formats until we really need to. This force us to do big, potentially risky, tech jumps.&lt;/p&gt;
&lt;p&gt;Because I'm missing more and more new features in the C++ language (we use C++98) and IDEs, I've decided to investigate how much effort would be required to switch a quite complex project from VS2008 to VS2015. Here follows some note from my experience.&lt;/p&gt;
&lt;div class="section" id="build-upgrade"&gt;
&lt;h2&gt;build upgrade&lt;/h2&gt;
&lt;p&gt;The solution conversion run clean apart from some warning reported int the conversion log. Nothing to concern about, just some deprecated features gone.
This was the easiest part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="moved-header"&gt;
&lt;h2&gt;moved header&lt;/h2&gt;
&lt;p&gt;In the new standard, some declaration have moved to different files.&lt;/p&gt;
&lt;blockquote&gt;
error C3861: 'inserter' not found&lt;/blockquote&gt;
&lt;p&gt;Here the question is, is it still in the STL/C++11?
A quick look at cppreference.com shows that std::inserter is now declared in iterator header. The same happen to back_inserter and other iterators related stuffs.
The simple solution was add &lt;em&gt;#include &amp;lt;iterator&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stl-changes"&gt;
&lt;h2&gt;STL changes&lt;/h2&gt;
&lt;p&gt;The comitee has done a great ammount of work from the VS2008 days refining the STL specification. The result is some adaption required for our project to conform.&lt;/p&gt;
&lt;blockquote&gt;
error C2678: '&amp;lt;&amp;lt;' binary operator not found&lt;/blockquote&gt;
&lt;p&gt;I get this error in a function with this shape:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt;  &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ostringstream&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cerr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solved this using an explicit string convertion from std::ostringstream using its method str(). Not really the a so great solution but it worked for me. The function above has become:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt;  &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ostringstream&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cerr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I get:&lt;/p&gt;
&lt;blockquote&gt;
error C2668: 'std::mem_fun': ambiguous function reference&lt;/blockquote&gt;
&lt;p&gt;Here what went wrong is the resolution of const return type from no const return type version of mem_fun. I expected the resolution to happen based on the constantness of the parameter. But, because the parameter method has both const and unconst overload, it fail resolving the right overload.
I solved this using a lambda instead of the mem_fun but had some doubt. After posting a question on &lt;em&gt;reddit/r/cpp&lt;/em&gt;, were someone (who really knowns what he says) pointed out that the lamda solution was actually the one to follow even to help the optimizer to do its job.&lt;/p&gt;
&lt;blockquote&gt;
std::bad_cast has no more a constructor accepting custom message so I removed the custom message.&lt;/blockquote&gt;
&lt;p&gt;Sorry for the error reformulation unfortunatly the italian version of VS actually translates also compiler output. I agree with this change, it force us not to use exception that (wrong way) but define our own specialization instead.&lt;/p&gt;
&lt;p&gt;We defined a function copy_if that was not included in C++98 STL. Because now it is in the standard, it was duplicated and ambigous and caused compilation error. This was solved by erasing our implementation of copy_if.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linker-errors"&gt;
&lt;h2&gt;Linker errors&lt;/h2&gt;
&lt;p&gt;Then I started to get errors from the Linker. How ungly are they!&lt;/p&gt;
&lt;p&gt;The first I get was a Linker error claiming from mfc90.lib. It cannot find the library.
This happened because of a static library created with the old IDE and linked (even if dinamically) to MFC I was linking into. Solved by converting also the library project to the new toolchain.&lt;/p&gt;
&lt;p&gt;Then I get an error claiming for a wrong usage of &lt;em&gt;remove_if&lt;/em&gt;.
In fact, &lt;em&gt;remove_if&lt;/em&gt; cannot be used on a container like &lt;em&gt;set&lt;/em&gt; because keys are immutable and so the ranges cannot be modified.&lt;/p&gt;
&lt;p&gt;We actually were using it in a wrong way or the VS2008 implementation was a bit more permissive.
The problem was about the remove of all item with a certain property from the set. To solve I've defined the following &lt;em&gt;erase_if&lt;/em&gt; helper function that work also on other kind of containers (at least &lt;em&gt;vector&lt;/em&gt; and &lt;em&gt;list&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;ContainerT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;PredicateT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;erase_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContainerT&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PredicateT&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ContainerT&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;const_iterator&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;You should prefer the &lt;em&gt;erase-remove&lt;/em&gt; idiom for the supported containers like vector as it is more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;So what the required effort?
The projects I used for my little test is the one I'm working on day basis for about 6 month. It is not particulary big bou it use few quite complex proprietary library that needed to be converted too.
It took a couple of my holyday day so I not really worked so hard. Not that big effort at the end.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cpp"></category><category term="cpp11"></category><category term="stl"></category><category term="vs2015"></category><category term="vs2008"></category></entry></feed>